name: Build

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full clone for better analysis

      # Step 2: Set up .NET 6 SDK
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      # Step 3: Cache SonarQube Packages
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Step 4: Install SonarQube Scanner Globally
      - name: Install SonarQube Scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool update --global dotnet-sonarscanner

      # Step 5: Start SonarQube Analysis
      - name: SonarQube Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet-sonarscanner begin `
          /k:"FlightDotAPI" `
          /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" `
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

     
     
